name: Build and deploy to OpenShift

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

env:
  OPENSHIFT_NAMESPACE: "kilo-dev"
  APP_NAME: "my-go-app"
  APP_PORT: "8084"
  IMAGE_REGISTRY: "docker.io/mridul017"
  IMAGE_REGISTRY_USER: "mridul017"
  IMAGE_TAGS: ""
  DEBUG: false

jobs:
  openshift-ci-cd:
    name: Build and deploy to OpenShift
    runs-on: ubuntu-20.04

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const core = require('@actions/core');
          const secrets = {
            OPENSHIFT_SERVER: process.env.OPENSHIFT_SERVER,
            OPENSHIFT_TOKEN: process.env.OPENSHIFT_TOKEN,
          };

          const GHCR = "ghcr.io";
          if (process.env.IMAGE_REGISTRY && process.env.IMAGE_REGISTRY.startsWith(GHCR)) {
            core.info(`Image registry is ${GHCR} - no registry password required`);
          } else {
            core.info("A registry password is required");
            secrets["IMAGE_REGISTRY_PASSWORD"] = process.env.IMAGE_REGISTRY_PASSWORD || '';
          }

          const missingSecrets = Object.entries(secrets).filter(([name, value]) => {
            if (!value) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`❌ At least one required secret is not set in the repository.`);
          } else {
            core.info(`✅ All the required secrets are set`);

    - name: Check out repository
      uses: actions/checkout@v4

    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

    - name: Build from Dockerfile
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.APP_NAME }}
        tags: ${{ env.IMAGE_TAGS }}
        dockerfiles: |
          ./Dockerfile

    - name: Push to registry
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4.6.0

    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    - name: Delete existing resources (if necessary)
      run: |
        oc delete deployment,service,route --selector=app=${{ env.APP_NAME }} --namespace=${{ env.OPENSHIFT_NAMESPACE }}

    - name: Create and expose app
      id: deploy-and-expose
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: ${{ env.APP_NAME }}
        image: ${{ steps.push-image.outputs.registry-path }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}

    - name: Print application URL
      env:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
